version: '3.8'

networks:
  ai_evaluation:
    driver: bridge

services:
  mysql_db:
    image: mysql:8
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: mysql
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
    ports:
      - 3303:3306
    volumes:
      - /mysql-data-2:/var/lib/mysql
    restart: always
    networks:
      - ai_evaluation
  backend:
    image: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    ports:
      - 5005:5000
    restart: always
    volumes:
      - ./backend/src:/app/src
      - ./backend/.env:/app/.env
    networks:
      - ai_evaluation
  frontend:
    image: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3003:3000
    restart: always
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/.env:/app/.env
    networks:
      - ai_evaluation
  jupyterhub:
    build:
      context: ./jupyterhub
      dockerfile: Dockerfile
    ports:
      - 8008:8000
    restart: always
    networks:
      - ai_evaluation
    command: jupyterhub -f /srv/jupyterhub/jupyterhub_config.py
    # command: jupyterhub
    volumes:
      - ./jupyterhub/jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py
    #   - ./jupyterhub:/src/jupyterhub/
  minioaie:
    image: minio/minio
    hostname: minioaie
    container_name: minioaie
    command: server --console-address ":9001"
    ports:
      - 9003:9000
      - 9004:9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: xqORsmOYEKkUltCStWaYcOEK1M24FDRd
      MINIO_VOLUMES: /data
    volumes:
      - ./minio/data:/data
    restart: unless-stopped
    networks:
      - ai_evaluation
  kube-connect:
    build:
      context: ./kube-connect
      dockerfile: Dockerfile
    hostname: kube-connect
    container_name: kube-connect
    ports:
      - 5000:5000
    volumes:
      - ./kube-connect/src:/app:rw
    restart: unless-stopped
    networks:
      - ai_evaluation
  nginx:
    build: ./label-studio
    image: heartexlabs/label-studio:latest
    ports:
      - "8080:8085"
      - "8082:8086"
    depends_on:
      - app
    environment:
      - LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-}
    #   Optional: Specify SSL termination certificate & key
    #   Just drop your cert.pem and cert.key into folder 'deploy/nginx/certs'
    #      - NGINX_SSL_CERT=/certs/cert.pem
    #      - NGINX_SSL_CERT_KEY=/certs/cert.key
    volumes:
      - ./label-studio/mydata:/label-studio/data:rw
      - ./label-studio/deploy/nginx/certs:/certs:ro
    #   Optional: Override nginx default conf
    #      - ./deploy/my.conf:/etc/nginx/nginx.conf
    command: nginx
    restart: unless-stopped
    networks:
      - ai_evaluation

  app:
    stdin_open: true
    tty: true
    build: .
    image: heartexlabs/label-studio:latest
    expose:
      - "8000"
    depends_on:
      - db
    environment:
      - DJANGO_DB=default
      - POSTGRE_NAME=postgres
      - POSTGRE_USER=postgres
      - POSTGRE_PASSWORD=
      - POSTGRE_PORT=5432
      - POSTGRE_HOST=db
      - LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-}
      - JSON_LOG=1
    #      - LOG_LEVEL=DEBUG
    volumes:
      - ./label-studio/mydata:/label-studio/data:rw
    command: label-studio-uwsgi
    restart: unless-stopped
    networks:
      - ai_evaluation

  db:
    image: postgres:11.5
    hostname: db
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      # - ./label-studio/postgres-data:/var/lib/postgresql/data
      - ./label-studio/deploy/pgsql/certs:/var/lib/postgresql/certs:ro
    restart: unless-stopped
    networks:
      - ai_evaluation


